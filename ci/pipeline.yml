resource_types:
- name: slack-notifier
  type: registry-image
  source: {repository: mockersf/concourse-slack-notifier}

- name: cloudformation
  type: docker-image
  source:
    repository: pcfseceng/cloudformation-resource

resources:
- name: aws-setup
  type: cloudformation
  source:
    aws_access_key: ((aws_access_key))
    aws_secret_key: ((aws_secret_key))
    aws_region: us-west-2

- name: resource-types
  type: git
  icon: playlist-check
  source:
    uri: https://github.com/ASa3ed/resource-types.git
    branch: master

- name: dutyfree
  type: git
  icon: code-tags
  source:
    uri: https://github.com/ASa3ed/resource-types-website.git
    branch: master
    submodules: all

- name: oci-build-task
  type: registry-image
  icon: calendar-check
  source: {repository: vito/oci-build-task}

- name: dutyfree-image
  icon: docker
  type: registry-image
  source:
    repository: asghostknight/dutyfree
    tag: latest
    username: "docker_username"
    password: "docker_password"

- name: unit-image
  icon: docker
  type: registry-image
  source:
    repository: concourse/unit

- name: every-6h
  icon: clock-outline
  type: time
  source: {interval: 6h}

- name: every-30s
  icon: clock-outline
  type: time
  source: {interval: 30s}

- name: notify
  type: slack-notifier
  icon: slack
  source:
    url: ((slack_hook))
    concourse_url: https://ci.concourse-ci.org

jobs:
- name: probe-uptime
  build_logs_to_retain: 20
  plan:
  - get: every-30s
    trigger: true
  - get: unit-image
  - task: should-return-200
    image: unit-image
    config:
      platform: linux
      run:
        path: curl
        args: ["-I", "https://resource-types.concourse-ci.org"]

- name: update-resource-types
  plan:
  - get: resource-types
    trigger: true
  - get: dutyfree
  - get: unit-image
  - task: update-resource-types
    image: unit-image
    file: dutyfree/ci/tasks/update-resource-types.yml
  - put: dutyfree
    params: {repository: dutyfree}

- name: test
  plan:
  - get: dutyfree
    trigger: true
  - get: unit-image
  - in_parallel:
    - task: elm-analyse
      image: unit-image
      file: dutyfree/ci/tasks/elm-analyse.yml
    - try:
        task: go-lint
        image: unit-image
        file: dutyfree/ci/tasks/go-lint.yml
  - in_parallel:
    - task: elm-tests
      image: unit-image
      file: dutyfree/ci/tasks/elm-test.yml
    - task: go-tests
      image: unit-image
      file: dutyfree/ci/tasks/go-test.yml
      params:
        TOKEN: ($GH_TOKEN)

- name: build-docker
  plan:
  - get: dutyfree
    passed: [test]
    trigger: true
  - get: oci-build-task
  - in_parallel:
    - task: build-dutyfree
      image: oci-build-task
      privileged: true
      output_mapping: {image: image-df}
      config:
        platform: linux
        params: {CONTEXT: dutyfree/}
        inputs: [{name: dutyfree}]
        outputs: [{name: image}]
        caches: [{path: cache-df}]
        run: {path: build}
  - in_parallel:
    - put: dutyfree-image
      params: {image: image-df/image.tar}

- name: sanity-check
  plan:
  - get: every-6h
    trigger: true
  - get: dutyfree
    passed: [build-docker]
    trigger: true
  - get: unit-image
  - task: sanity-check
    image: unit-image
    file: dutyfree/ci/tasks/sanity-check.yml
  on_failure:
    put: notify
    params:
      mode: normal
      alert_type: failed
  
- name: deploy
  plan:
  - get: dutyfree
  - get: dutyfree-image
  - get: unit-image
    passed: [sanity-check]
    trigger: true
  - put: aws-setup
    params:
      cloudformation_file: dutyfree/ci/tasks/cloudformation.yml
      stack_name: concourse      
  - task: ansible
    image: unit-image
    config:
      platform: linux
      inputs: 
      - name: dutyfree
      run:
        path: sh
        args:
        - -exc
        - |
          whoami
          env
          uname -a
          ls -la 

          curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py
          python get-pip.py
          python -m pip install ansible --quiet
          ansible --version | grep "python version"

          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -qq awscliv2.zip
          ./aws/install

          ls -la

          ip=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=concourse" \
              --output text)
          
          echo "$ip" >> dutyfree/ci/ansible/inventory.txt

          ls -la

          ansible-playbook -i dutyfree/ci/ansible/inventory.txt dutyfree/ci/ansible/configure_server.yml